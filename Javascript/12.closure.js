﻿﻿/* Javascript Fundementals *//* 12. Closures *//*function myFunction(arg1) {	return function() {		return arg1;	}}var fn = myFunction("Hello Closure.");fn();*/// We have to be careful if we call "myFunction" too many times. Each time we// call myFunction we create an execution context that allocates memory for that call.// If we keep calling myFunction we end up using more and more and more memory.//var fn2 = myFunction("Hello Closure 2.");//fn2();//fn();// Clear myFunction from memory.//fn = null; //fn2 = null;//This example shows a simple closure. ////It is called a closure because the function we are returning from "myFunction"// closes around arg1. Actually our closure (the anonymous function we are // returning from "myFunction") can close around anything contained by "myFunction"// (variables, other functions) by just referencing them.// // J A V A S C R I P T   M E M O R Y   M A N A G E M E N T//// The entire myFunction must be kept in memory until there is no object with// a reference to the anonymous function returned my myFunction.