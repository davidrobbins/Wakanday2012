﻿/* Javascript Fundementals *//* 2. Scope *//* Scope refers to where variables and functions are accessible,  *//*   and what context is being executed. *//* Basically a variable or function can be defined in "local" or "global" scope. *//* "Global" scope is the default. *//* In Javascript Scope is provided by functions. *//* Let's look first at the global scope. *//*var globalVar = "This is a global variable.";var globalFunction = function() {	var returnMe = globalVar;	globalVar = "Value has been modified.";		return returnMe;};globalFunction() + " " + globalVar;*//* Now let's look at local scope. *//* Variables and functions are limited to the function they are defined in. *//* Variables and functions cannot be accessed from outside the function they are defined in.*//*var globalVar = "This is a global variable.";var globalFunction = function() {	var localVar = "This is a local variable.";	var returnMe = localVar;	globalVar = "Value has been modified.";		return returnMe;};globalFunction() + " " + localVar + " " + globalVar;*//* Just as local variables defined in a function cannot be accessed outside of the function, *//*  function parameters cannot be accessed outside of the function it is defined in. *//*var globalVar = "This is a global variable.";var globalFunction = function(paramOne) {	var localVar = "This is a local variable.";	var returnMe = paramOne;	globalVar = "Value has been modified.";		return returnMe;};globalFunction(2) + " " + paramOne;  // We will have a problem here.*/										/* The Scope Chain *//*var globalVar = "Global Var";var globalFunction = function() {	var localVar = "Local Var";		var localFunction = function() {		var localVar = "Super Local Var";		return localVar;	};		var returnMe = localFunction();	var returnMeToo = localVar;		return returnMe + " " + returnMeToo;};globalFunction();*//* scope.html page for examples. */