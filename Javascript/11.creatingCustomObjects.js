﻿﻿/* Javascript Fundementals *//* 11. Creating Custom Objects *///1. Use object literal notation to create two objects./*var person = {	firstName: "David",	lastName:  "Robbins",	getFullName: function() {		return this.firstName + " " + this.lastName;	}};var person2 = {	firstName: "Juergen",	lastName:  "Fesslmeier",	getFullName: function() {		return this.firstName + " " + this.lastName;	}};*///person2.getFullName();//2. We can improve on this. Create a Factory Function./*function createPerson(firstName, lastName) {	return {		firstName: firstName,		lastName: lastName,				getFullName: function() {			return this.firstName + " " + this.lastName;		},				greet: function(person) {			if (typeof person.getFullName !== "undefined") {				return "Hello " + person.getFullName();			} else {				return "Hello Stranger";			}			}	};}*///Create some people.//var factoryPerson = createPerson("Add", "Komoncharoensiri");//var factoryPerson2 = createPerson("Doris", "Beaulieu");//factoryPerson.getFullName();//factoryPerson.greet(factoryPerson2);//factoryPerson.greet({});//3. Better still let's create a constructor function. We can create a custom data type.// Whenever we call the "Person" constructor function with the "new" keyword "this" will refer to// our new entity.// We don't have to return anything. Constructor functions automatically return a value when used with the "new" keyword.// They return the object you are constructing. You can override this behaviour./*function Person(firstName, lastName) {	this.firstName = firstName;	this.lastName = lastName;		this.getFullName = function() {			return this.firstName + " " + this.lastName;	};			this.greet = function(person) {		if (person instanceof Person) {			return "Hello " + person.getFullName();		} else {			return "Hello Stranger";		}		};}*///var constructorPerson = new Person("Dave", "Terry"),//	constructorPerson2 = new Person("Dan", "Wasserman");	//constructorPerson.getFullName();//constructorPerson.greet(constructorPerson2);//constructorPerson.greet({});//4. Improve our constructor function by using prototype object.// In our constructor function in example three we are creating the "getFullName" and "greet" methods for // every instance of a Person object. This is inefficient because the code for these methods is the same for// all instances. // But every function has a "prototype" property. Anything we define on the prototype will be shared among// all instances of the Person object. So let's attach our Person methods to the Person.prototype./*function BetterPerson(firstName, lastName) {	this.firstName = firstName;	this.lastName = lastName;}BetterPerson.prototype.getFullName = function() {		return this.firstName + " " + this.lastName;};	BetterPerson.prototype.greet = function(person) {	if (person instanceof BetterPerson) {		return "Hello " + person.getFullName();	} else {		return "Hello Stranger";	}	};*/	//var prototypePerson = new BetterPerson("Laurent", "Ribardiere"),//prototypePerson2 = new BetterPerson("Asmae", "Benkirane");//	//prototypePerson.getFullName();//prototypePerson.greet(prototypePerson2);//prototypePerson.greet({});//W A K A N D A   C O N S T R U C T O R   F U N C T I O N//var myComany = new ds.Company({name: "Catepillar", revenues: 4000000});//myComany//myComany.save();